{"version":3,"sources":["state/atoms.js","components/Input.js","components/Button.js","api/weather.js","components/Search.js","api/time.js","components/PlaceItem.js","components/PlacesList.js","components/Text.js","components/Row.js","components/WeatherIcon.js","components/WeatherDetails.js","components/DetailsSection.js","components/Column.js","components/WeatherMainInformation.js","components/MainSection.js","components/GlobalSpinner.js","components/Wrapper.js","components/Credits.js","App.js","reportWebVitals.js","index.js"],"names":["placesState","atom","key","default","spinnerState","selectedPlaceState","location","time","current","weather","daily","Input","styled","input","Button","button","axios","Axios","create","baseURL","apiKey","process","searchPlaces","filterValue","a","params","q","limit","appid","get","response","data","console","log","fetchFullLocationWeatherDetails","lat","lon","units","exclude","join","temperature","temp","slice","map","e","Container","div","breakpoint","SearchInput","SearchInputContainer","ButtonContainer","Search","useState","setFilterValue","setPlaces","useSetRecoilState","useRecoilState","isSpinnerActive","setIsSpinnerActive","search","newPlaces","placeholder","value","onChange","target","onClick","disabled","size","fetchTimeFromLocation","by","lng","format","CountryImage","img","PlaceDescription","span","isBeingHovered","PlaceItem","place","country","name","state","isHovered","setIsHovered","setSelectedPlace","setSpinnerIsActive","handleClick","weatherDetailsPromise","timeDetailsPromise","Promise","all","locationWeatherDetails","timeDetails","countryFlagUrl","toLowerCase","onMouseEnter","onMouseLeave","src","alt","PlacesList","places","useRecoilValue","uniquePlaces","_","uniqBy","concat","i","StyledText","p","weight","inline","Text","children","rest","Row","WeatherIcon","type","props","color","Fragment","DetailsContainer","Title","RowItemContainer","RowItemLabelContainer","RowItem","label","icon","style","marginLeft","WeatherDetails","isEmpty","clouds","humidity","wind_speed","rain","DateTime","fromSeconds","dt","toFormat","main","day","DetailsSectionContent","PlaceListContainer","WeatherDetailsContainer","DetailsSection","Column","Degrees","Place","LocationDetailsContainer","WeatherDescriptionContainer","WeatherMainInformation","fromFormat","formatted","marginBottom","StyledLoader","active","GlobalSpinner","backgroundImageName","Main","Wrapper","weatherType","footer","CreditsContainer","PhotosByContainer","PhotosByText","Credits","rel","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b03fcef7.chunk.js","sourcesContent":["import { atom } from 'recoil'\n\nexport const placesState = atom({\n  key: 'places',\n  default: []\n})\n\nexport const spinnerState = atom({\n  key: 'spinner',\n  default: false\n})\n\nexport const selectedPlaceState = atom({\n  key: 'selectedPlace',\n  default: {\n    location: {},\n    time: {},\n    current: {\n      weather: {},\n      time: {}\n    },\n    daily: []\n  }\n})","import styled from 'styled-components'\n\nexport const Input = styled.input`\n  background-color: transparent;\n  border: none;\n  border-bottom: 0.2px solid #888888;\n  color: white;\n  line-height: 2.5;\n  font-family: Roboto;\n  font-weight: lighter;\n  :focus {\n    outline: none;\n    border-bottom: 0.2px solid white;\n  }\n  ::placeholder {\n    color: #888888;\n    font-family: Roboto;\n    font-weight: lighter;\n  }\n`","import styled from 'styled-components'\n\nexport const Button = styled.button`\n  appearance: none;\n  background-color: white;\n  color: black;\n  border-radius: 4px;\n  padding: 10px;\n  border: none;\n  box-shadow: none;\n  :hover {\n    background-color: black;\n    color: white;\n    cursor: pointer;\n  }\n  :disabled {\n    background-color: #ccc;\n    color: white;\n    cursor: not-allowed;\n  }\n`","import Axios from 'axios'\n\nconst axios = Axios.create({ baseURL: 'http://api.openweathermap.org/' })\n\nconst GEO_API_PATH = '/geo/1.0/direct'\nconst FULL_LOCATION_WEATHER_DETAILS_API_PATH = '/data/2.5/onecall'\nconst apiKey = process.env.REACT_APP_OPEN_WEATHER_API_KEY\n\n/**\n * Search places (cities) by the given value\n * @param {string} filterValue \n */\nexport const searchPlaces = async (filterValue) => {\n  try {\n    const params = {\n      q: filterValue,\n      limit: '4',\n      appid: apiKey\n    }\n    const response = await axios.get(GEO_API_PATH, { params })\n    return response.data\n  } catch (error) {\n    console.log(error)\n    return []\n  }\n}\n\n/**\n * Retrieves weather information for the given coordinates\n * @param {{\n  *  lat: number,\n  *  lon: number\n  * }} args\n*/\nexport const fetchFullLocationWeatherDetails = async ({ lat, lon }) => {\n  try {\n    const params = {\n      lat,\n      lon,\n      units: 'metric',\n      appid: apiKey,\n      exclude: ['minutely', 'alerts'].join(',')\n    }\n    const { data } = await axios.get(FULL_LOCATION_WEATHER_DETAILS_API_PATH, { params })\n    return {\n      current: {\n        ...data.current,\n        weather: { ...data.current.weather[0], temperature: data.current.temp }\n      },\n      daily: data.daily.slice(0, 5).map(e => ({ ...e, weather: { ...e.weather[0], temperature: e.temp } }))\n    }\n  } catch (error) {\n    console.log(error)\n    return []\n  }\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport breakpoint from 'styled-components-breakpoint'\nimport { Input } from './Input'\nimport { Button } from './Button'\nimport { FaSearch } from 'react-icons/fa'\nimport { searchPlaces } from '../api/weather'\nimport { placesState } from '../state/atoms'\nimport { spinnerState } from '../state/atoms'\nimport { useRecoilState, useSetRecoilState } from 'recoil'\n\nconst Container = styled.div`\n  width: 100%;\n  align-items: center;\n  display: flex;\n  ${breakpoint('tablet')`\n    justify-content: center;\n  `}\n  ${breakpoint('desktop')`\n    justify-content: left;\n  `}\n`\n\nconst SearchInput = styled(Input)`\n  width: 100%;\n`\n\nconst SearchInputContainer = styled.div`\n  padding-right: 20px;\n  width: 70%;\n  ${breakpoint('desktop')`\n    width: 85%;\n    max-width: 100%;\n  `}\n  display: inline-block;\n  max-width: 200px;\n`\n\nconst ButtonContainer = styled.div`\n  display: inline-block;\n`\n\nexport const Search = () => {\n  const [filterValue, setFilterValue] = useState('')\n  const setPlaces = useSetRecoilState(placesState);\n  const [isSpinnerActive, setIsSpinnerActive] = useRecoilState(spinnerState);\n  const search = async () => {\n    setIsSpinnerActive(true)\n    const newPlaces = await searchPlaces(filterValue)\n    setPlaces(newPlaces)\n    setIsSpinnerActive(false)\n  }\n\n  return (\n    <Container>\n      <SearchInputContainer>\n        <SearchInput \n          placeholder='Search Places' \n          value={filterValue}\n          onChange={(e) => setFilterValue(e.target.value)}\n        />\n      </SearchInputContainer>\n      <ButtonContainer>\n        <Button onClick={search} disabled={isSpinnerActive || !filterValue}>\n          <FaSearch size={10} />\n        </Button>\n      </ButtonContainer>\n    </Container>\n  )\n}","import axios from 'axios'\n\nconst apiKey = process.env.REACT_APP_TIMEZONE_API_KEY\n\n/**\n * Retrieves time information for the given coordinates\n * @param {{\n *  lat: number,\n *  lon: number\n * }} args\n */\nexport const fetchTimeFromLocation = async ({ lat, lon }) => {\n  try {\n    const params = {\n      key: apiKey,\n      by: 'position',\n      lat,\n      lng: lon,\n      format: 'json'\n    }\n    const response = await axios.get('http://api.timezonedb.com/v2.1/get-time-zone', { params })\n    return response.data\n  } catch (error) {\n    console.log(error)\n    return []\n  }\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { fetchFullLocationWeatherDetails } from '../api/weather'\nimport { fetchTimeFromLocation } from '../api/time'\nimport { useSetRecoilState } from 'recoil'\nimport { selectedPlaceState, spinnerState } from '../state/atoms'\n\n/**\n * @typedef {object} Place\n * @prop {string} name\n * @prop {string} country\n * @prop {string} state\n * @prop {string} lat\n * @prop {string} lon\n */\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-bottom: 1.5em;\n  cursor: pointer;\n`\n\nconst CountryImage = styled.img`\n  margin-right: 10px;\n`\n\nconst PlaceDescription = styled.span`\n  color: ${({ isBeingHovered }) => isBeingHovered ? 'white' : 'lightgray'};\n  font-weight: lighter;\n`\n\n/**\n * Item displayed per each result in the place list component\n * @param {{ \n *  place: Place\n * }} props\n */\nexport const PlaceItem = ({ place }) => {\n  const { country, name, state } = place\n  const [isHovered, setIsHovered] = useState(false)\n  const setSelectedPlace = useSetRecoilState(selectedPlaceState)\n  const setSpinnerIsActive = useSetRecoilState(spinnerState)\n  const handleClick = async () => {\n    const { lat, lon } = place\n    setSpinnerIsActive(true)\n    const weatherDetailsPromise = fetchFullLocationWeatherDetails({ lat, lon })\n    const timeDetailsPromise = fetchTimeFromLocation({ lat, lon })\n    const [locationWeatherDetails, timeDetails] = await Promise.all([weatherDetailsPromise, timeDetailsPromise])\n    setSelectedPlace({ ...locationWeatherDetails, location: place, time: timeDetails })\n    setSpinnerIsActive(false)\n  }\n  const countryFlagUrl = `https://www.countryflags.io/${country.toLowerCase()}/flat/24.png`\n  return (\n    <Container \n      onClick={handleClick} \n      onMouseEnter={() => setIsHovered(true)} \n      onMouseLeave={() => setIsHovered(false)} \n    >\n      <CountryImage src={countryFlagUrl} alt={`${country} flag`} />\n      <PlaceDescription isBeingHovered={isHovered}>\n        {name}, {country} {state}\n      </PlaceDescription>\n    </Container>\n  )\n}\n","import React from 'react'\nimport { useRecoilValue } from 'recoil'\nimport _ from 'lodash'\nimport { placesState } from '../state/atoms'\nimport { PlaceItem } from './PlaceItem'\nimport styled from 'styled-components'\nimport breakpoint from 'styled-components-breakpoint'\n\nconst Container = styled.div`\n  width: 100%;\n  ${breakpoint('desktop')`\n    height: 200px;\n  `};\n`\n\nexport const PlacesList = () => {\n  const places = useRecoilValue(placesState);\n  const uniquePlaces = _.uniqBy(places, (e) => e.country.concat(e.name))\n  return (\n    <Container>\n      {uniquePlaces.map((e, i) => (\n          <PlaceItem place={e} key={i} />\n      ))}\n    </Container>\n  )\n}","import styled from 'styled-components'\n\nexport const StyledText = styled.p`\n  color: white;\n  font-weight: ${({ weight }) => weight === 'bold' ? 'normal' : 'lighter'};\n  display: ${({ inline }) => inline ? 'inline' : 'block'};\n`\n\n/**\n * @param {{\n  *  weight?: 'title' | 'body',\n  *  inline?: boolean\n  * }} props\n  */\nexport const Text = ({ weight, inline, children, ...rest }) => (\n  <StyledText weight={weight} inline={inline} {...rest}>\n    {children}\n  </StyledText>\n)\n","import styled from 'styled-components'\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n`","import React from 'react'\nimport { WiFog, WiDaySunny, WiSnow, WiRain, WiCloud } from 'react-icons/all'\n\n/**\n * Icon that describes the given weather type\n * @param {{\n  *  type: string,\n  *  size: number\n  * }} props\n  */\n export const WeatherIcon = ({ type = '', size }) => {\n   const props = { size, color: 'white' }\n   switch (type) {\n     case 'Clear':\n       return <WiDaySunny {...props} />\n     case 'Clouds':\n       return <WiCloud {...props} />\n     case 'Rain':\n       return <WiRain {...props} />\n     case 'Snow':\n       return <WiSnow {...props} />\n     case 'Mist':\n     case 'Fog':\n       return <WiFog {...props} />\n     default:\n       return <React.Fragment />\n   }\n }\n ","import React from 'react'\nimport _ from 'lodash'\nimport { DateTime } from 'luxon'\nimport { useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport breakpoint from 'styled-components-breakpoint'\nimport { Text } from './Text'\nimport { Row } from './Row'\nimport { WeatherIcon } from './WeatherIcon'\nimport { selectedPlaceState } from '../state/atoms'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\n\nconst DetailsContainer = styled.div`\n  ::before {\n    content: \"\";\n    border-top: 0.2px solid white;\n    width: 100%;\n    padding-bottom: 2em;\n  }\n  display: flex;\n  flex-direction: column;\n  height: 200px;\n  width: 100%;\n`\n\nconst Title = styled(Text)`\n  margin-bottom: 1.2em;\n`\n\nconst RowItemContainer = styled(Row)`\n  justify-content: space-between;\n  width: 100%;\n  padding-bottom: 1.5em;\n  ${breakpoint('tablet')`\n    max-width: 200px\n  `}\n\n  ${breakpoint('desktop')`\n    max-width: 100%\n  `}\n`\n\nconst RowItemLabelContainer = styled(Row)`\n  align-items: center;\n  justify-content: center;\n`\n\n/**\n * Used to display information row about the weather\n * @param {{\n *  label: string,\n *  value: string,\n *  icon: React.ReactNode\n * }} props \n */\nconst RowItem = ({ label, value, icon }) => {\n  return (\n    <RowItemContainer>\n      <RowItemLabelContainer>\n        {icon}\n        <Text style={{ marginLeft: 4 }}>{label}</Text>\n      </RowItemLabelContainer>\n      <Text weight='bold'>{value}</Text>\n    </RowItemContainer>\n  )\n}\n\nexport const WeatherDetails = () => {\n  const { current, daily } = useRecoilValue(selectedPlaceState)\n  if (_.isEmpty(current) || _.isEmpty(daily)) {\n    return <React.Fragment />\n  }\n\n  return (\n    <Container>\n      <DetailsContainer>\n        <Title weight='bold'>Weather Details</Title>\n        <RowItem label='Cloudy' value={`${current.clouds}%`} />\n        <RowItem label='Humidity' value={`${current.humidity}%`} />\n        <RowItem label='Wind' value={`${current.wind_speed}km/h`} />\n        {!_.isEmpty(current.rain) && <RowItem label='Rain' value={`${current.rain['1h']}mm`} />}\n      </DetailsContainer>\n      <DetailsContainer>\n        <Title weight='bold'>Next Days</Title>\n        {daily.map((e, i) => (\n          <RowItem\n            key={i}\n            label={DateTime.fromSeconds(e.dt).toFormat('cccc')}\n            icon={<WeatherIcon type={e.weather.main} size={20} />}\n            value={`${e.weather.temperature.day} °`}\n          />\n        ))}\n      </DetailsContainer>\n    </Container>\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\nimport breakpoint from 'styled-components-breakpoint'\nimport { Search } from './Search'\nimport { PlacesList } from './PlacesList'\nimport { WeatherDetails } from './WeatherDetails'\n\nconst Container = styled.div`\n  width: 100%;\n  overflow-y: scroll;\n  backdrop-filter: blur(15px);\n  ${breakpoint('desktop')`\n    position: absolute;\n    width: 30%;\n    height: 100vh;\n    background-position-x: right;\n    background-position-y: center;\n    bottom: 0;\n    right: 0;\n  `}\n`\n\nconst DetailsSectionContent = styled.div`\n  padding: 1em 3em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  ${breakpoint('tablet')`\n    align-items: center;\n  `}\n  ${breakpoint('desktop')`\n    padding: 2em 3em 0.5 3em;\n    align-items: flex-start;\n  `}\n`\n\nconst PlaceListContainer = styled(DetailsSectionContent)`\n  ${breakpoint('desktop')`\n    padding-bottom: 0;\n  `}\n`\n\nconst WeatherDetailsContainer = styled(DetailsSectionContent)`\n  padding-bottom: 2em;\n`\n\nexport const DetailsSection = () => (\n  <Container>\n    <DetailsSectionContent>\n      <Search />\n    </DetailsSectionContent>\n    <PlaceListContainer>\n        <PlacesList />\n    </PlaceListContainer>\n    <WeatherDetailsContainer>\n      <WeatherDetails />\n    </WeatherDetailsContainer>\n  </Container>\n)","import styled from 'styled-components';\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n`","import React from 'react'\nimport _ from 'lodash'\nimport { DateTime } from 'luxon'\nimport styled from 'styled-components'\nimport { useRecoilValue } from 'recoil'\nimport breakpoint from 'styled-components-breakpoint'\nimport { Row } from './Row'\nimport { Text } from './Text'\nimport { Column } from './Column'\nimport { WeatherIcon } from './WeatherIcon'\nimport { selectedPlaceState } from '../state/atoms'\n\nconst Container = styled(Row)`\n  width: 100%;\n  padding: 6em 1em;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  ${breakpoint('desktop')`\n    align-items: flex-end;\n    padding: 0 0 6em 10em;\n    flex-direction: row;\n    justify-content: flex-start;\n  `}\n`\n\nconst Degrees = styled(Text)`\n  font-size: 6em;\n  line-height: 0.8;\n  font-weight: normal;\n  text-align: center;\n  ${breakpoint('desktop')`\n    margin-right: 5px;\n    text-align: left;\n  `}\n`\n\nconst Place = styled(Text)`\n  font-size: 2em;\n  font-weight: normal;\n  margin-bottom: 5px;\n  display: block;\n  text-align: center;\n  ${breakpoint('desktop')`\n    text-align: left;\n  `}\n`\n\nconst LocationDetailsContainer = styled(Column)`\n  padding-top: 1em;\n  justify-content: center;\n  align-items: center;\n  ${breakpoint('desktop')`\n    padding-top: 0;\n    padding-left: 5px;\n    padding-right: 5px;\n    max-width: 60%;\n    justify-content: initial;\n    align-items: initial;\n  `}\n`\n\nconst WeatherDescriptionContainer = styled(Column)`\n  padding-top: 1em;\n  ${breakpoint('desktop')`\n    padding-top: 0;\n    padding-left: 20px;\n  `}\n`\n\nexport const WeatherMainInformation = () => {\n  const { current, location, time } = useRecoilValue(selectedPlaceState)\n  const outFormat = 'hh:mm a - cccc, dd MMM yyyy'\n  const inFormat = 'yyyy-MM-dd hh:mm:ss'\n  const hasAllValues = !_.isEmpty(current) && !_.isEmpty(location)\n  return (\n    (hasAllValues && (\n      <Container>\n        <Degrees>{current.weather.temperature}°</Degrees>\n        <LocationDetailsContainer>\n          <Place>{location.name}, {location.country}</Place>\n          <Text inline>{DateTime.fromFormat(time.formatted, inFormat).toFormat(outFormat)}</Text>\n        </LocationDetailsContainer>\n        <WeatherDescriptionContainer>\n          <Row style={{ marginBottom: 10 }}>\n            <WeatherIcon type={current.weather.main} size={40} />\n          </Row>\n          <Row>\n            <Text>{current.weather.main }</Text>\n          </Row>\n        </WeatherDescriptionContainer>\n      </Container>\n    ))\n  )\n}","import React from 'react'\nimport styled from 'styled-components'\nimport breakpoint from 'styled-components-breakpoint'\nimport { WeatherMainInformation } from './WeatherMainInformation'\n\nconst Container = styled.div`\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  order: 2;\n  ${breakpoint('desktop')`\n    width: 70%;\n    display: flex;\n    align-items: flex-end;\n    order: 1\n  `}\n`\n\nexport const MainSection = () => (\n  <Container>\n    <WeatherMainInformation />\n  </Container>\n)","import React from 'react'\nimport styled from 'styled-components'\nimport Loader from 'react-spinners/CircleLoader'\n\nconst StyledLoader = styled.div`\n  display: ${({ active }) => active ? 'flex' : 'none'};\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: 100%;\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  background-color: black;\n  opacity: 0.7;\n  z-index: 9999;\n`\n\nexport const GlobalSpinner = ({ active }) => (\n  <StyledLoader\n    active={active}\n  >\n    <Loader size={100} color={'white'} />\n  </StyledLoader>\n)","import React from 'react'\nimport styled from 'styled-components'\nimport { useRecoilValue } from 'recoil'\nimport breakpoint from 'styled-components-breakpoint'\nimport { selectedPlaceState, spinnerState } from '../state/atoms'\nimport { DetailsSection } from './DetailsSection'\nimport { MainSection } from './MainSection'\nimport { GlobalSpinner } from './GlobalSpinner'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  width: 100%;\n  background-image: ${({ backgroundImageName }) => `url(\"/images/${backgroundImageName}.jpg\")`};\n  background-size: cover;\n  background-position-y: center;\n  ${breakpoint('desktop')`\n    flex-direction: row;\n  `}\n`\n\nconst Main = styled(MainSection)`\n  order: 2;\n  display: flex;\n`\n\nexport const Wrapper = () => {\n  const { current } = useRecoilValue(selectedPlaceState)\n  const isSpinnerActive = useRecoilValue(spinnerState)\n  const weatherType = current.weather.main || 'Clouds'\n  return (\n    <React.Fragment>\n      <GlobalSpinner active={isSpinnerActive} />\n      <Container backgroundImageName={weatherType}>\n        <Main />\n        <DetailsSection />\n      </Container>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from './Text'\nimport { Row } from './Row'\n\nconst Container = styled.footer`\n  width: 100%;\n  background-color: black;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 0;\n`\n\nconst CreditsContainer = styled(Row)`\n  width: 100%;\n  text-align: center;\n  justify-content: space-evenly;\n  align-items: center;\n  padding: 10px 0;\n  flex-wrap: wrap;\n`\n\nconst PhotosByContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  padding: 20px 0;\n`\n\nconst PhotosByText = styled(Text)`\n  width: 100%;\n  text-align: center;\n\n`\n\nexport const Credits = () => (\n  <Container>\n    <CreditsContainer>\n      <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dribbble.com/shots/7118235-Weather-DailyUI-037\">Design inspiration</a> by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://dribbble.com/thearthurk\">Arthur K</a></Text>\n    </CreditsContainer>\n    <PhotosByContainer>\n      <PhotosByText>Photos By</PhotosByText>\n      <CreditsContainer>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@ninjason?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jason Leung</a></Text>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@nathananderson?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Nathan Anderson</a></Text>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@neilrst?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Neil Rosenstech</a></Text>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@valentin_mueller?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Valentin Müller</a></Text>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@eberhardgross?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Eberhard</a></Text>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@samuel_s?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Samuel</a></Text>\n        <Text><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://unsplash.com/@florianolv?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Florian Olivo</a></Text>\n      </CreditsContainer>\n    </PhotosByContainer>\n  </Container>\n)\n\n\n","import React from 'react'\nimport './App.css'\nimport { Wrapper } from './components/Wrapper'\nimport { RecoilRoot } from 'recoil'\nimport { Credits } from './components/Credits'\n\nconst App = () => (\n  <RecoilRoot>\n    <Wrapper />\n    <Credits />\n  </RecoilRoot>\n)\n\nexport default App\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}